class Region
  type raw_region_entity = [Numeric, Numeric, Numeric, Numeric]

  attr_accessor x: Numeric

  attr_accessor y: Numeric

  attr_accessor width: Numeric

  attr_accessor height: Numeric

  def initialize: (Numeric x, Numeric y, Numeric width, Numeric height) -> void

  def self.from_top_left_corner_coordinates: (Numeric x, Numeric y, Numeric width, Numeric height) -> Region?

  def self.from_edge_coordinates: (Numeric left, Numeric `top`, Numeric right, Numeric bottom) -> Region?

  def empty?: -> bool

  def blank?: -> bool

  def present?: -> bool

  def to_edge_coordinates: () -> ::Array[Numeric]

  def to_top_left_corner_coordinates: () -> ::Array[Numeric]

  def top: () -> Numeric

  def bottom: () -> Numeric

  def left: () -> Numeric

  def right: () -> Numeric

  def size: () -> Numeric

  def to_a: () -> ::Array[Numeric]

  def find_intersect_with: (Region region) -> Region?

  def intersect?: (Region region) -> boolish

  def move_by: (Numeric right_by, Numeric down_by) -> Region

  def find_relative_intersect: (Region region) -> Region?

  def cover?: (Numeric x, Numeric y) -> boolish
end
