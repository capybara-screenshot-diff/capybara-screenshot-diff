module ChunkyPNG
  class Canvas

  end

  class Image
    def self.from_blob: (String str) -> Image
    def self.from_file: (String filename) -> Image
  end
end

module Capybara
  module Screenshot
    module Diff
      module Drivers
        class ChunkyPNGDriver < BaseDriver[ChunkyPNG::Canvas]
          private

          def build_region_for_whole_image: (untyped new_image) -> untyped

          def find_diff_rectangle: (untyped org_img, untyped new_img, untyped area_coordinates) -> (Region? | nil)

          def find_top: (untyped old_img, untyped new_img) -> (::Array[untyped] | nil)

          def find_left_right_and_top: (untyped old_img, untyped new_img, untyped region) -> ::Array[untyped]

          def find_bottom: (untyped old_img, untyped new_img, untyped left, untyped right, untyped bottom) -> untyped

          def same_color?: (untyped old_img, untyped new_img, untyped x, untyped y) -> (true | untyped)

          def skipped_region?: (untyped x, untyped y) -> (false | untyped)

          def color_distance_at: (untyped new_img, untyped old_img, untyped x, untyped y, shift_distance_limit: untyped) -> untyped

          def shift_distance_at: (untyped new_img, untyped old_img, untyped x, untyped y, color_distance_limit: untyped) -> untyped

          def color_matches: (untyped new_img, untyped org_color, untyped x, untyped y, untyped color_distance_limit) -> untyped

          def _load_images: (untyped old_file, untyped new_file) -> ::Array[untyped]
        end
      end
    end
  end
end
