module Capybara
  module Screenshot
    module Diff
      LOADED_DRIVERS: ::Hash[Symbol, untyped]

      # Compare two images and determine if they are equal, different, or within some comparison
      # range considering color values and difference area size.
      class ImageCompare
        TMP_FILE_SUFFIX: "~"

        attr_reader driver: untyped

        attr_reader driver_options: untyped

        attr_reader annotated_new_file_name: String

        attr_reader annotated_old_file_name: String

        attr_reader new_file_name: String

        attr_reader old_file_name: String

        attr_reader skip_area: untyped

        attr_accessor shift_distance_limit: untyped

        attr_accessor area_size_limit: untyped

        attr_accessor color_distance_limit: untyped

        def initialize: (String new_file_name, ?(String | Drivers::BaseDriver::options_entity)? old_file_name, ?Drivers::BaseDriver::options_entity options) -> void

        def skip_area=: (Array[Region] new_skip_area) -> void

        # Compare the two image files and return `true` or `false` as quickly as possible.
        # Return falsely if the old file does not exist or the image dimensions do not match.
        def quick_equal?: () -> bool

        # Compare the two images referenced by this object, and return `true` if they are different,
        # and `false` if they are the same.
        def different?: () -> bool

        def clean_tmp_files: () -> void

        def save: (untyped old_img, untyped new_img, String annotated_old_file_name, String annotated_new_file_name) -> void

        def old_file_exists?: () -> bool

        def reset: () -> void

        NEW_LINE: "\n"

        def error_message: () -> String

        def difference_coordinates: () -> Region::raw_region_entity

        def difference_region_area_size: () -> Numeric

        private

        attr_accessor difference_region: untyped

        def different: (untyped old_image, untyped new_image) -> true

        def find_driver_class_for: (untyped driver) -> void

        def preprocess_images: (Array[untyped] images, ?untyped driver) -> ::Array[untyped]

        def preprocess_image: (untyped image, ?untyped driver) -> untyped

        def old_file_size: () -> Integer

        def new_file_size: () -> Integer

        def not_different: () -> false

        def difference_region_empty?: (untyped new_image, Region region) -> bool

        def annotate_and_save: (untyped images, Region region) -> void

        DIFF_COLOR: ::Array[255 | 0]

        def annotate_difference: (untyped images, Region region) -> void

        SKIP_COLOR: ::Array[255 | 192 | 0]

        def annotate_skip_areas: (untyped annotated_images, Array[Region] skip_areas) -> void
      end
    end
  end
end
