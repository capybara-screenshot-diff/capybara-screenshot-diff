# Add the `screenshot` method to ActionDispatch::IntegrationTest
module Capybara
  module Screenshot
    module Diff
      module TestMethods
        include Stabilization

        include Vcs

        include BrowserHelpers

        type name_entity = (Symbol | String)

        def initialize: (*untyped) -> void

        def group_parts: () -> Array[String]

        def full_name: (name_entity name) -> String

        def screenshot_dir: () -> String

        def screenshot_section: (name_entity name) -> void

        def screenshot_group: (name_entity? name) -> void

        def screenshot: (name_entity name, ?skip_stack_frames: ::Integer, **untyped options) -> bool

        def assert_image_not_changed: ((String | Array[String]) caller, String name, ImageCompare comparison) -> ::String?

        private

        type input_options = {
            area_size_limit: Numeric?,
            color_distance_limit: Numeric?,
            driver: (:auto | :vips | :chunky_png)?,
            shift_distance_limit: Numeric?,
            skip_area: nil | Array[Region::raw_region_entity | String] | String | Region::raw_region_entity,
            stability_time_limit: Numeric?,
            tolerance: Numeric?,
            wait: Numeric?
          }

        def calculate_crop_region: (input_options driver_options) -> Region?

        def create_output_directory_for: (String file_name) -> void

        def take_comparison_screenshot: (ImageCompare comparison, Region? crop, Numeric? stability_time_limit, Numeric? wait) -> void

        type skip_area_entity = String | Region::raw_region_entity

        def calculate_skip_area: ((skip_area_entity | Array[skip_area_entity]) skip_area, (nil | String | Region | Region::raw_region_entity) crop) -> Array[Region]

        def build_regions_for: ((Enumerable[Region::raw_region_entity]) coordinates) -> Array[Region?]
      end
    end
  end
end
